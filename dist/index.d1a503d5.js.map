{"mappings":"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","sources":["p5.pattern.js"],"sourcesContent":["// p5.Pattern\n// MIT License\n// Copyright (c) 2021 Taichi Sayama\n// A pattern drawing library for p5.js.\n\n\n// ---------------------------------------------------------------------------\n// PatternControler Calss\n// ---------------------------------------------------------------------------\n\nfunction PatternControler()\n{\n    this.x = 0;\n    this.y = 0;\n    this.w = 0;\n    this.h = 0;\n    this.colors = ['#FFFFFF', '#000000'];\n    this.angle = 0;\n    this.patternFunction = null;\n    this.renderTarget = null;\n}\n\n// ---------------------------------------------------------------------------\n\n/*\nFunction to change the amount of pattern rotation.\nUse patternAngle() to check current angle.\n*/\nPatternControler.prototype.patternAngle = function(_angle)\n{\n    if(typeof(_angle) === 'number') this.angle = _angle;\n    return this.angle;\n}\n\n\n/*\nFunction to set the drawing function.\n*/\nPatternControler.prototype.setPatternFunction = function(_func)\n{\n    if(typeof(_func) !== 'function')return false;\n    this.patternFunction = _func;\n    return this.patternFunction;\n};\n \n\n/**\n * Function to set parameters and draw pattern.\n * @param {Number} _x   x-coordinate of the corner of pattern \n * @param {Number} _y   y-coordinate of the corner of pattern \n * @param {Number} _w   width of the pattern\n * @param {Number} _h   height of the pattern\n * @param {} _renderTarget \n */\nPatternControler.prototype.applyPattern = function(_x, _y, _w, _h, _renderTarget)\n{\n    this._setPatternArea(_x, _y, _w, _h);\n    this._setRenderTarget(_renderTarget);\n    this.renderTarget = _renderTarget;\n    this._drawPattern();\n}\n\n/**\n * Function to set the color palette of the pattern.\n * Use patternColors() to check current palette.\n * @param {Array} _colsArr \n */\nPatternControler.prototype.patternColors = function(_colsArr)\n{\nif(Array.isArray(_colsArr))this.colors = _colsArr;\n//return this.colors;\nreturn this.colors.slice(0, this.colors.length);\n}\n\n\n\n// ---------------------------------------------------------------------------\n//Private functions\n\n/*\nFunction to change the drawing range of a pattern\n*/\nPatternControler.prototype._setPatternArea = function(_x, _y, _w, _h)\n{\n    this.x = _x;\n    this.y = _y;\n    this.w = _w;\n    this.h = _h;\n};\n\n/*\nFunction to set the pattern target.\n*/\nPatternControler.prototype._setRenderTarget = function(_renderTarget)\n{\n    this.renderTarget = _renderTarget;\n};\n\n/*\nFunction to draw the pattern.\n*/\nPatternControler.prototype._drawPattern = function()\n{\n    const rt = this.renderTarget;\n\n    //Generate a drawing function. apply rotation\n    const func = typeof(this.patternFunction) === 'function' ?\n    this.patternFunction : this._flatFill();\n\n    const rotatedFunc = this._rotatedFuncGen(func, this.angle);\n    \n    //cache renderMode\n    const pRectMode = rt._renderer._rectMode;\n    const pEllipseMode = rt._renderer._ellipseMode;\n\n    //draw\n    rt.push();\n    rt.drawingContext.clip();\n    rt.translate(this.x, this.y);\n    rotatedFunc(this.w, this.h, rt);\n    rt.pop();\n\n    //reset renderMode\n    rt.rectMode(pRectMode);\n    rt.ellipseMode(pEllipseMode);\n};\n\n/*\nGenerate a drawing function with rotation applied.\n*/\nPatternControler.prototype._rotatedFuncGen = function(_ptnFunc, _angle)\n{\n    const func = function(_w, _h, _rt)\n    {\n        //Calculate the new size according to the rotation angle.\n        const p1 = _rt.createVector(-_w/2, _h/2).rotate(_angle);\n        const p2 = _rt.createVector(_w/2, _h/2).rotate(_angle);\n        const nw = Math.max(Math.abs(p1.x), Math.abs(p2.x)) * 2;\n        const nh = Math.max(Math.abs(p1.y), Math.abs(p2.y)) * 2;\n\n        _rt.push();\n        _rt.translate(_w / 2, _h / 2);\n        _rt.rotate(_angle);\n        _rt.translate(-nw / 2, -nh / 2);\n        _ptnFunc(nw, nh, _rt);\n        _rt.pop();\n    }\n\n    return func;\n};\n\n/*\nDefault pattern function. \n*/\nPatternControler.prototype._flatFill = function()\n{\n    const c = this.patternColors();\n\n    return function(_w, _h, _rt)\n    {\n        _rt.rectMode(_rt.CORNER);\n        _rt.fill(c[0]);\n        _rt.noStroke();\n        _rt.rect(0, 0, _w, _h);\n    }\n};\n\n\n\n// ---------------------------------------------------------------------------\n// Vertex Infomation Class\n// ---------------------------------------------------------------------------\n\nfunction PatternVertexInfo()\n{\n    this.verticies = [];\n    this.isCurve = false;\n    this.curveAreaMult = 1.25;\n}\n\n// ---------------------------------------------------------------------------\n\nPatternVertexInfo.prototype.reset = function()\n{\n    this.verticies = [];\n    this.isCurve = false;\n};\n\nPatternVertexInfo.prototype.addVertex = function(x, y)\n{\n    this.verticies.push([x, y]);\n};\n\nPatternVertexInfo.prototype.addCurveVertex = function(x, y)\n{\n    this.addVertex(x, y);\n    this.isCurve = true;\n};\n\nPatternVertexInfo.prototype.addBezierVertex = function(x2, y2, x3, y3, x4, y4)\n{\n    this.addVertex(x2, y2);\n    this.addVertex(x3, y3);\n    this.addVertex(x4, y4);\n};\n\nPatternVertexInfo.prototype.addQuadraticVertex = function(cx, cy, x3, y3)\n{\n    this.addVertex(cx, cy);\n    this.addVertex(x3, y3);\n};\n\nPatternVertexInfo.prototype.culclateArea = function()\n{\n    let minx = this.verticies[0][0];\n    let maxx = minx;\n    let miny = this.verticies[0][1];\n    let maxy = miny;\n\n    for(let i = 0; i < this.verticies.length; i++)\n    {\n       let nx =  this.verticies[i][0];\n       let ny =  this.verticies[i][1];\n\n       minx = Math.min(minx, nx);\n       maxx = Math.max(maxx, nx);\n       miny = Math.min(miny, ny);\n       maxy = Math.max(maxy, ny);\n    }\n\n    let w = maxx - minx;\n    let h = maxy - miny;\n    let cx = w / 2 + minx;\n    let cy = h / 2 + miny;\n    \n    if(this.isCurve)\n    {\n        w *= this.curveAreaMult;\n        h *= this.curveAreaMult;\n    }\n\n    let x = cx - w /2;\n    let y = cy - h /2;\n\n    const area = {x : x, y : y, w : w, h : h};\n\n    return area;\n};\n\n\n\n// ---------------------------------------------------------------------------\n// p5 extentions\n// ---------------------------------------------------------------------------\n\n\np5.prototype._patternControler = new PatternControler(); \np5.Graphics.prototype._patternControler = new PatternControler();\n\np5.prototype._patternVertexInfo = new PatternVertexInfo();\np5.Graphics.prototype._patternVertexInfo = new PatternVertexInfo();\n\n\n/**\n * Function to change the amount of pattern rotation.\n * Use patternAngle() to check current angle.\n * @param {Number} _angle  the angle of rotation, \n * specified in radians or degrees, depending on current angleMode\n */\np5.prototype.patternAngle = function(_angle)\n{\n    return this._patternControler.patternAngle(_angle);\n};\n\n\n/**\n * Function to set the color palette of the pattern.\n * Use patternColors() to check current palette.\n * @param {Array} _colsArr \n */\np5.prototype.patternColors = function(_colsArr)\n{\n    return this._patternControler.patternColors(_colsArr);\n};\n\n\n/**\n * Function to set the pattern\n * @param  {function} _func     Pattern drawing function.\n */\np5.prototype.pattern = function(_func)\n{\n    return this._patternControler.setPatternFunction(_func);\n};\n\n\n// ---------------------------------------------------------------------------\n//Shape functions\n\n(function()\n{\n    /*\n    Functions to adjust coordinate data\n    */\n    const _modeAdjust = function(a, b, c, d, mode)\n    {\n        if (mode === p5.prototype.CORNER) {\n        return { x: a, y: b, w: c, h: d };\n        } else if (mode === p5.prototype.CORNERS) {\n        return { x: a, y: b, w: c - a, h: d - b };\n        } else if (mode === p5.prototype.RADIUS) {\n        return { x: a - c, y: b - d, w: 2 * c, h: 2 * d };\n        } else if (mode === p5.prototype.CENTER) {\n        return { x: a - c * 0.5, y: b - d * 0.5, w: c, h: d };\n        }\n    };\n\n    /*\n    Function to disable drawing of fills and stroke.\n    */\n    const _disableColor = function(_renderTarget)\n    {\n        _renderTarget.noStroke();\n        _renderTarget.fill(255, 0);\n    };\n\n\n    // ---------------------------------------------------------------------------\n\n    //rect\n    p5.prototype.rectPattern = function(...args)\n    {\n        _disableColor(this);\n        const r = this.rect(...args);\n\n        const val = _modeAdjust(\n            arguments[0],\n            arguments[1],\n            arguments[2],\n            arguments[3],\n            this._renderer._rectMode\n        );\n\n        this._patternControler.applyPattern(val.x, val.y, val.w, val.h, this);\n\n        return r;\n    };\n\n    //square\n    p5.prototype.squarePattern = function(...args)\n    {\n        _disableColor(this);\n        const r = this.square(...args);\n\n        const val = _modeAdjust(\n            arguments[0],\n            arguments[1],\n            arguments[2],\n            arguments[2],\n            this._renderer._rectMode\n        );\n\n        this._patternControler.applyPattern(val.x, val.y, val.w, val.h, this);\n        return r;\n    };\n\n    //ellipse\n    p5.prototype.ellipsePattern = function(...args)\n    {\n        _disableColor(this);\n        const r = this.ellipse(...args);\n        \n        const val = _modeAdjust(\n            arguments[0],\n            arguments[1],\n            arguments[2],\n            arguments[3],\n            this._renderer._ellipseMode\n        );\n\n        this._patternControler.applyPattern(val.x, val.y, val.w, val.h, this);\n        return r;\n    };\n\n    \n    //arc\n    p5.prototype.arcPattern = function(...args)\n    {\n        _disableColor(this);\n        const r = this.arc(...args);\n\n        const val = _modeAdjust(\n            arguments[0],\n            arguments[1],\n            arguments[2],\n            arguments[3],\n            this._renderer._ellipseMode\n        );\n\n        this._patternControler.applyPattern(val.x, val.y, val.w, val.h, this);\n        return r;\n    };\n\n    \n    //circle\n    p5.prototype.circlePattern = function(...args)\n    {\n        _disableColor(this);\n        const r = this.circle(...args);\n\n        const val = _modeAdjust(\n            arguments[0],\n            arguments[1],\n            arguments[2],\n            arguments[2],\n            this._renderer._ellipseMode\n        );\n        this._patternControler.applyPattern(val.x, val.y, val.w, val.h, this);\n        return r;\n    };\n\n    \n    //triangle\n    p5.prototype.trianglePattern = function(...args)\n    {\n        _disableColor(this);\n        const r = this.triangle(...args);\n\n        //Calculates the drawing area of the pattern with the center of gravity.\n        const cx = (arguments[0] + arguments[2] + arguments[4]) / 3;\n        const cy = (arguments[1] + arguments[3] + arguments[5]) / 3;\n        const w = this.max([Math.abs(cx - arguments[0]), Math.abs(cx - arguments[2]), Math.abs(cx - arguments[4])]) * 2;\n        const h = this.max([Math.abs(cy - arguments[1]), Math.abs(cy - arguments[3]), Math.abs(cy - arguments[5])]) * 2;\n        this._patternControler.applyPattern(cx - w /2, cy - h / 2, w, h, this);\n        \n        //Calculates center position.(Not used)\n        /*\n        const minX = min(min(arguments[0], arguments[2]), arguments[4]);\n        const maxX = max(max(arguments[0], arguments[2]), arguments[4]);\n        const minY = min(min(arguments[1], arguments[3]), arguments[5]);\n        const maxY = max(max(arguments[1], arguments[3]), arguments[5]);\n        */\n        return r;\n    };\n\n    \n    //quad\n    p5.prototype.quadPattern = function(...args)\n    {\n        _disableColor(this);\n        const r = this.quad(...args);\n\n        const minX = this.min([arguments[0], arguments[2], arguments[4], arguments[6]]);\n        const maxX = this.max([arguments[0], arguments[2], arguments[4], arguments[6]]);\n        const minY = this.min([arguments[1], arguments[3], arguments[5], arguments[7]]);\n        const maxY = this.max([arguments[1], arguments[3], arguments[5], arguments[7]]);\n\n        this._patternControler.applyPattern(minX, minY, maxX - minX, maxY - minY, this);\n        return r;\n    };\n\n\n    //vertex\n    p5.prototype.beginShapePattern = function(...args)\n    {\n        const r = this.beginShape(...args);\n        this._patternVertexInfo.reset();\n        return r;\n    };\n\n    p5.prototype.beginContourPattern = function(...args)\n    {\n        return this.beginContour(...args);\n    };\n\n    p5.prototype.vertexPattern = function(...args)\n    {\n        const r = this.vertex(...args);\n        this._patternVertexInfo.addVertex(arguments[0], arguments[1]);\n        return r;\n    };\n\n    p5.prototype.curveVertexPattern = function(...args)\n    {\n        const r = this.curveVertex(...args);\n        this._patternVertexInfo.addCurveVertex(arguments[0], arguments[1]);\n        return r;\n    };\n\n    p5.prototype.bezierVertexPattern = function(...args)\n    {\n        const r = this.bezierVertex(...args);\n        this._patternVertexInfo.addBezierVertex(\n            arguments[0], arguments[1], \n            arguments[2], arguments[3],\n            arguments[4], arguments[5]\n        );\n        return r;\n    };\n\n    p5.prototype.quadraticVertexPattern = function(...args)\n    {\n        const r = this.quadraticVertex(...args);\n        this._patternVertexInfo.addQuadraticVertex(\n            arguments[0], arguments[1], \n            arguments[2], arguments[3]\n        );\n        return r;\n    };\n\n    p5.prototype.endContourPattern = function(...args)\n    {\n        return this.endContour(...args);\n    };\n\n    p5.prototype.endShapePattern = function(...args)\n    {\n        _disableColor(this);\n        const r = this.endShape(...args);\n        const area = this._patternVertexInfo.culclateArea();\n        this._patternControler.applyPattern(area.x, area.y, area.w, area.h, this);\n        return r;\n    };\n\n})();\n\n\n\n// ---------------------------------------------------------------------------\n// Pattern functions.\n// ---------------------------------------------------------------------------\n\nconst PTN = \n{\n    /**\n     * Noise pattern\n     * patternColors()[0]   base color\n     * patternColors()[1]   dot color\n     * @param {Number} _density  Density of dots. default = 0.2\n     * Constrained between 0 and 1.\n     */\n     noise : function(_density = 0.2)\n     {\n         const func = function(_w, _h, _rt = window)\n         {\n            const density = _rt.constrain(_density, 0, 1);\n            const c = _rt.patternColors();\n\n            const num = _w * _h * density;\n            const ns = 0.01;\n    \n            _rt.ellipseMode(_rt.CENTER);\n            _rt.rectMode(_rt.CORNER);\n            _rt.noStroke();\n\n            _rt.fill(c[0]);\n            _rt.rect(0, 0, _w, _h);\n    \n            _rt.fill(c[1 % c.length]);\n            for(let i = 0; i < num; i++){\n                const x = _rt.random(_w);\n                const y = _rt.random(_h);\n                const dia = _rt.noise(x * ns, y * ns) * 0.5 + 1;\n                _rt.ellipse(x, y, dia, dia);\n            }\n         }\n         return func;\n     },\n \n     /**\n      * Noise gradient pattern\n      * patternColors()[0]   base color\n      * patternColors()[1]   dot color\n      * @param {Number} _density  Density of dots. default = 0.2\n      */\n     noiseGrad : function(_density = 0.2)\n     {    \n         const func = function(_w, _h, _rt = window)\n         {\n            const density = _rt.min(1, _density);\n            const c = _rt.patternColors();\n\n            const num = _w * _h * density;\n            const ns = 0.01;\n\n            _rt.rectMode(_rt.CORNER);\n            _rt.ellipseMode(_rt.CENTER);\n            _rt.noStroke();\n    \n            _rt.fill(c[0]);\n            _rt.rect(0, 0, _w, _h);\n    \n            _rt.fill(c[1 % c.length]);\n            for(let i = 0; i < num; i++){\n                const x = _rt.abs(_rt.randomGaussian()) / 5 * _w;\n                const y = _rt.random(_h);\n                const dia = _rt.noise(x * ns, y * ns) * 0.5 + 1;\n                _rt.ellipse(x, y, dia, dia);\n            }\n         }\n         return func;\n     },\n\n    /**\n     * Stripe pattern\n     * Fill the colors of patternColors() in order.\n     * @param {Number} _space   Stripe space. default = 10\n     */\n    stripe : function(_space = 10)\n    {\n        const func = function(_w, _h, _rt = window)\n        {\n            _space = Math.abs(_space);\n            if(_space == 0)_space = 10;\n\n            const c = _rt.patternColors();\n\n            _rt.rectMode(_rt.CORNER);\n            _rt.noStroke();\n\n            let count = 0;\n\n            for(let x = 0; x <= _w + _space; x+= _space)\n            {\n                _rt.fill(c[count % c.length]);\n                _rt.rect(x, 0, Math.ceil(_space), _h);\n                count++;\n            }\n        }\n        return func;\n    },\n\n    /**\n     * Concentric circle stripe pattern.\n     * Fill the colors of patternColors() in order.\n     * @param {Number} _space      Stripe space. default = 10\n     * @param {Number} _minRadius  Minimum radius. default = 0\n     */\n    stripeCircle : function(_space = 25, _minRadius = 0)\n    {\n        const func = function(_w, _h, _rt = window)\n        {\n            _space = _rt.abs(_space);\n            if(_space == 0)_space = 25;\n\n            const c = _rt.patternColors();\n\n            const maxRadius = _rt.sqrt(_w * _w + _h * _h);\n            const num  = _rt.ceil((maxRadius - _minRadius) / _space);\n            \n            _rt.ellipseMode(_rt.CENTER);\n            _rt.noStroke();\n\n            for(let i = 0; i < num; i++)\n            {\n                _rt.fill(c[i % c.length]);\n                const radius = _minRadius + (num - 1 - i) * _space;\n                _rt.circle(_w / 2, _h / 2, radius * 2);\n            }\n        }\n        return func;\n    },\n\n    /**\n     * Concentric polygon stripe pattern.\n     * @param {Number} _vertNum     Number of vertices in a polygon,\n     *                              constrained between 3 and 20.    default = 3\n     * @param {Number} _space       Stripe space. default = 10\n     * @param {Number} _minRadius   Minimum radius. default = 0\n     */\n    stripePolygon : function(_vertNum = 3, _space = 25, _minRadius = 0)\n    {\n        const func = function(_w, _h, _rt = window)\n\t\t{\n            _space = _rt.abs(_space);\n            if(_space == 0)_space = 25;\n\n            const vNum = _rt.int(_rt.constrain(_vertNum, 3, 30));\n            const c = _rt.patternColors();\n\n            const maxRadius = _rt.sqrt(_w * _w + _h * _h);\n            const num  = _rt.ceil((maxRadius - _minRadius) / _space);\n\n            _rt.noStroke();\n\n            for(let i = 0; i < num; i++)\n            {\n                    _rt.fill(c[i % c.length]);\n                    const radius = _minRadius + (num - 1 - i) * _space;\n\n                    _rt.beginShape();\n                    for(let i = 0; i < vNum; i++)\n                    {\n                            const rad = i * Math.PI * 2 / vNum;\n                            const x = _w / 2 + Math.cos(rad) * radius;\n                            const y = _h / 2 + Math.sin(rad) * radius;\n                            _rt.vertex(x, y);\n                    }\n                    _rt.endShape(_rt.CLOSE);\n            }\n\t\t}\n\t\treturn func;\n    },\n\n\n    /**\n     * Radial stripe pattern.\n     * @param {Number} _angleSpan   Stripe angle space. default = PI / 4,\n     * specified in radians or degrees, depending on current angleMode\n     */\n    stripeRadial : function(_angleSpan = 1)\n    {\n        const func = function(_w, _h, _rt = window)\n        {\n            _angleSpan = _rt.abs(_angleSpan);\n            if(_angleSpan == 0)_angleSpan = 1;\n\n            const c = _rt.patternColors();\n            const tau = _rt._angleMode == _rt.DEGREES ? 360 : _rt.TAU;\n\n            _rt.ellipseMode(_rt.CENTER);\n            _rt.noStroke();\n\n            let count = 0;\n            const dia = _rt.sqrt(_w * _w + _h * _h);\n            for(let r = 0; r < tau; r += _angleSpan)\n            {\n                //Error measures\n                const endRad = r + _angleSpan > tau ? 0.00001 : r + _angleSpan;\n                _rt.fill(c[count % c.length]);\n                _rt.arc(_w / 2, _h /2, dia, dia, r, endRad + 0.0001);\n                count++;\n            }\n        }\n        return func;\n    },\n\n\n    /**\n     * Wave pattern\n     * patternColors()[0]       base color\n     * patternColors()[1]       wave color\n     * @param {Number} _waveW   Wave width. default = 100\n     * @param {Number} _waveH   Wave height. default = 20\n     * @param {Number} _space   Line spacing. default = 20 \n     * @param {Number} _weight  Line weight. default = 5 \n     */\n    wave : function(_waveW = 100, _waveH = 10, _space = 20, _weight = 5)\n    {\n        const func = function(_w, _h, _rt = window)\n        {\n            _space = _rt.abs(_space);\n            if(_space == 0)_space = 20;\n            _waveW = _rt.abs(_waveW);\n            if(_waveW == 0)_waveW = 100;\n\n            const c = _rt.patternColors();\n\n            const vertSpan = 3;\n            _rt.rectMode(_rt.CORNER);\n            _rt.noStroke();\n\n            _rt.fill(c[0]);\n            _rt.rect(0, 0, _w, _h);\n\n            _rt.fill(c[1]);\n            for(let y = -_waveH; y <= _h + _waveH; y+= _space)\n            {\n                _rt.beginShape();\n                \n                for(let x = 0; x < _w; x += vertSpan)\n                {\n                    const rad = x / _waveW * _rt.TAU;\n                    _rt.vertex(x, y + Math.sin(rad) * _waveH);\n                }\n                \n                _rt.vertex(_w, y + Math.sin(_w / _waveW * Math.PI * 2) * _waveH);\n                for(let x = _w; x > 0; x -= vertSpan)\n                {\n                    const rad = x / _waveW * Math.PI * 2;\n                    _rt.vertex(x, y + _weight + Math.sin(rad) * _waveH);\n                }\n                _rt.vertex(0, y + _weight + Math.sin(0) * _waveH);\n                \n                _rt.endShape(_rt.CLOSE);\n            }\n        }\n        return func;\n    },\n\n    /*\n    Private function.\n    Generate tiling pattern functions.\n    */\n    _customTiling : function(_spaceX, _spaceY, _tileFunc, _useOffset = false)\n    {\n        const func = function(_w, _h, _rt)\n        {\n            _spaceX = _rt.abs(_spaceX);\n            if(_spaceX == 0)_spaceX = 50;\n            _spaceY = _rt.abs(_spaceY);\n            if(_spaceY == 0)_spaceY = 50;\n\n            const c = _rt.patternColors();\n            _rt.rectMode(_rt.CORNER);\n            _rt.noStroke();\n\n            _rt.fill(c[0]);\n            _rt.rect(0, 0, _w, _h);\n\n            let yi = 0;\n            _rt.fill(c[1]);\n            for(let y = 0; y <= _h + _spaceY /2; y += _spaceY)\n            {\n                let xi = 0;\n                let offset = yi % 2 == 1 && _useOffset ? -_spaceX / 2 : 0;\n                for(let x = offset; x <= _w + _spaceX /2; x += _spaceX)\n                {\n                    _rt.push();\n                    _rt.translate(x, y);\n                    _tileFunc(_rt, xi, yi);\n                    _rt.pop();\n                    xi++;\n                }\n                yi++;\n            }\n        }\n        return func;\n    },\n\n    /** \n     * Dot pattern \n     * patternColors()[0]       base color\n     * patternColors()[1]       Checked color\n     * @param {Number} _space   Dot spacing. default = 15\n     * @param {Number} _dia     Dot diameter. default = 15\n     */\n    dot : function(_space = 15, _dia = 7)\n    {\n        const func = PTN._customTiling(\n            _space,\n            _space,\n            function(_rt)\n            {\n                _rt.noStroke();\n                _rt.ellipseMode(_rt.CENTER);\n                _rt.circle(0, 0, _dia);\n            },\n            false\n        );\n        return func;\n    },\n\n     /**\n     * Checked pattern\n     * patternColors()[0]       base color\n     * patternColors()[1]       Checked color\n     * @param {Number} _checkW    Width of checkered pattern. default = 10\n     * @param {Number} _checkH    Height of checkered pattern (Optional)\n     */\n    checked : function(...args)\n    {\n        let w, h;\n        if(arguments.length == 0){ w = 10; h = 10;}\n        else if(arguments.length == 1){w = arguments[0]; h = w;}\n        else{w = arguments[0]; h = arguments[1];}\n\n        const func = PTN._customTiling(\n            w * 2,\n            h,\n            function(_rt)\n            {\n                _rt.noStroke();\n                _rt.rectMode(_rt.CORNER);\n                _rt.rect(0, 0, w, h);\n            },\n            true\n        );\n        return func;\n    },\n\n    /**\n     * Cross pattern\n     * patternColors()[1]       base color\n     * patternColors()[0]       line color\n     * @param {Number} _space   Line spacing. default = 20\n     * @param {Number} _weight  Line weight. default = 5\n     */\n    cross : function(_space = 20, _weight = 5)\n    {\n        const func = function(_w, _h, _rt = window)\n        {\n            const c = _rt.patternColors();\n            _rt.rectMode(_rt.CORNER);\n            _rt.fill(c[0]);\n            _rt.rect(0, 0, _w, _h);\n            \n            _rt.fill(c[1 % c.length]);\n            for(let y = 0; y < _h; y+= _space)_rt.rect(0, y + _space / 2 - _weight /2, _w, _weight); \n            for(let x = 0; x < _w; x+= _space)_rt.rect(x + _space / 2 - _weight / 2, 0, _weight, _h); \n        }\n        return func;\n    },\n\n    /**\n     * Triangle pattern\n     * patternColors()[0]       base color\n     * patternColors()[1]       line color\n     * @param {Number} _triW  Triangle width. default = 20\n     * @param {Number} _triH  Triangle height. default = 20\n     */\n    triangle : function(_triW = 20, _triH = 20)\n    {\n        const func = PTN._customTiling(\n            _triW,\n            _triH,\n            function(_rt)\n            {\n                _rt.noStroke();\n                _rt.triangle(0, 0, _triW, 0, _triW /2, _triH);\n            },\n            true\n        );\n        return func;\n    }\n\n};\n\n"],"names":[],"version":3,"file":"index.d1a503d5.js.map","sourceRoot":"/__parcel_source_root/"}